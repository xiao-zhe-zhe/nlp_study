# coding:utf8

import torch
import torch.nn as nn
import numpy as np
import random
import matplotlib.pyplot as plt

"""

基于pytorch框架编写模型训练
实现一个自行构造的找规律(机器学习)任务
规律：x是一个5维向量，最大数是第几维就是第几类

"""


class TorchModel(nn.Module):
    def __init__(self, input_size):
        super(TorchModel, self).__init__()
        self.linear = nn.Linear(input_size, 5)  # 输出5个节点对应5个类别
        self.loss = nn.CrossEntropyLoss()  # 交叉熵损失函数

    # 当输入真实标签，返回loss值；无真实标签，返回预测值
    def forward(self, x, y=None):
        y_pred = self.linear(x)  # 直接输出logits (batch_size, 5)
        if y is not None:
            return self.loss(y_pred, y.long())  # 转换为LongTensor
        else:
            return y_pred

# 生成一个样本, 样本的生成方法，代表了我们要学习的规律
# 随机生成一个5维向量，并返回最大值
def build_sample():
    x = np.random.random(5)
    y = np.argmax(x)
    return x, y

# 随机生成一批样本
def build_dataset(total_sample_num):
    X = []
    Y = []
    for _ in range(total_sample_num):
        x, y = build_sample()
        X.append(x)
        Y.append(y)
    return torch.FloatTensor(X), torch.LongTensor(Y)  # 标签转为LongTensor

# 测试代码
# 用来测试每轮模型的准确率
def evaluate(model):
    model.eval()
    test_sample_num = 100
    x, y = build_dataset(test_sample_num)
    with torch.no_grad():
        y_pred = model(x)
        predicted = torch.argmax(y_pred, dim=1)
        correct = (predicted == y).sum().item()
    acc = correct / test_sample_num
    print(f"正确预测个数：{correct}, 正确率：{acc:.4f}")
    return acc


def main():
    # 配置参数
    epoch_num = 20    # 训练轮数
    batch_size = 20   # 每次训练样本个数
    train_sample = 5000   # 每轮训练总共训练的样本总数
    input_size = 5   # 输入向量维度
    learning_rate = 0.001   # 学习率
    # 建立模型
    model = TorchModel(input_size)
    # 选择优化器
    optim = torch.optim.Adam(model.parameters(), lr=learning_rate)
    log = []
    # 创建训练集，正常任务是读取训练集
    train_x, train_y = build_dataset(train_sample)
    # 训练过程
    for epoch in range(epoch_num):
        model.train()
        watch_loss = []
        for batch_index in range(train_sample // batch_size):
            start = batch_index * batch_size
            end = start + batch_size
            x = train_x[start:end]
            y = train_y[start:end]
            loss = model(x, y)    # 计算loss  model.forward(x,y)
            loss.backward()    # 计算梯度
            optim.step()   # 更新权重
            optim.zero_grad()    # 梯度归零
            watch_loss.append(loss.item())

        avg_loss = np.mean(watch_loss)
        print(f"第{epoch + 1}轮平均loss: {avg_loss:.4f}")
        acc = evaluate(model)
        log.append([acc, avg_loss])
    # 保存模型
    torch.save(model.state_dict(), "model.bin")

    # 绘制训练曲线
    plt.plot(range(len(log)), [l[0] for l in log], label="Accuracy")
    plt.plot(range(len(log)), [l[1] for l in log], label="Loss")
    plt.legend()
    plt.show()

# 使用训练好的模型做预测
def predict(model_path, input_vec):
    input_size = 5
    model = TorchModel(input_size)
    model.load_state_dict(torch.load(model_path))       # 加载训练好的权重

    model.eval()        # 测试模式
    with torch.no_grad():   # 不计算梯度
        y_pred = model(torch.FloatTensor(input_vec))    # 模型预测
        predicted = torch.argmax(y_pred, dim=1)
    for vec, cls in zip(input_vec, predicted):
        print(f"输入：{vec}, 预测类别：{cls.item()+1}")


if __name__ == "__main__":
    main()
    test_vec = [
        [0.9, 0.4, 0.3, 0.2, 0.1],  # 第1类
        [0.4, 0.95, 0.3, 0.2, 0.1],  # 第2类
        [0.3, 0.4, 0.96, 0.2, 0.1],  # 第3类
        [0.2, 0.3, 0.4, 0.99, 0.1],  # 第4类
        [0.1, 0.2, 0.3, 0.4, 0.95]  # 第5类
    ]
    predict("model.bin", test_vec)
