import torch
import torch.nn as nn
import numpy as np
import random
import json
import matplotlib.pyplot as plt

"""
改用交叉熵实现一个多分类任务，五维随机向量最大的数字在哪维就属于哪一类。
"""


# 生成一个样本, 样本的生成方法，代表了我们要学习的规律
# 随机生成一个5维向量，最大的数字在哪维就属于哪一类
def build_sample():
    x = np.random.random(5)
    return x, np.argmax(x)


def build_dataset(total_sample_num):
    # 预分配numpy数组，避免列表append的低效操作
    X_np = np.zeros((total_sample_num, 5), np.float32)  # 输入特征：(样本数, 5)
    Y_np = np.zeros(total_sample_num, np.int64)  # 标签：(样本数, 1)

    for i in range(total_sample_num):
        x, y = build_sample()
        X_np[i] = x  # 直接赋值到numpy数组的对应行
        Y_np[i] = y  # 标签直接存储为标量

    # 一次性转换为PyTorch张量
    X_tensor = torch.from_numpy(X_np)
    Y_tensor = torch.from_numpy(Y_np)
    return X_tensor, Y_tensor


# if __name__ == '__main__':
#     print(build_dataset(100))


class MyTorchModel(nn.Module):
    def __init__(self, input_size, output_size):
        super().__init__()
        self.linear1 = nn.Linear(input_size, 16)  # 添加隐藏层
        self.relu = nn.ReLU()  # 非线性
        self.linear2 = nn.Linear(16, output_size)
        self.loss_fn = nn.CrossEntropyLoss()  # 交叉商

    def forward(self, x, y=None):
        x = self.relu(self.linear1(x))
        y_pred = self.linear2(x)
        if y is not None:
            return self.loss_fn(y_pred, y)
        else:
            return torch.softmax(y_pred, dim=1)


# 测试代码
# 用来测试每轮模型的准确率
def evaluate(model):
    model.eval()  # 设置为评估模式
    test_sample_num = 100
    x, y = build_dataset(test_sample_num)

    correct, wrong = 0, 0
    with torch.no_grad():
        y_pred = model(x)  # 获取概率分布
        y_pred_classes = torch.argmax(y_pred, dim=1)  # 获取预测的类别
        for y_p, y_t in zip(y_pred_classes, y):
            # print(f"真实值{y_t.item()} 预测值{y_p.item()}")
            if y_p == y_t:
                correct += 1
            else:
                wrong += 1
    print(f"正确预测个数：{correct}, 正确率：{correct / (correct + wrong):.6f}")
    return correct / (correct + wrong)


def main():
    # 配置参数
    epoch_num = 20  # 训练轮数
    batch_size = 20  # 每次训练样本个数
    train_sample = 6000  # 每轮训练总共训练的样本总数
    input_size = 5  # 输入向量维度
    learning_rate = 0.001  # 学习率
    # 建立模型
    model = MyTorchModel(input_size, 5)
    # 选择优化器
    optim = torch.optim.Adam(model.parameters(), lr=learning_rate)
    log = []
    # 创建训练集，正常任务是读取训练集
    train_x, train_y = build_dataset(train_sample)
    # 训练过程
    for epoch in range(epoch_num):
        model.train()  # 设置为训练模式
        watch_loss = []
        for batch_index in range(train_sample // batch_size):
            x = train_x[batch_index * batch_size: (batch_index + 1) * batch_size]
            y = train_y[batch_index * batch_size: (batch_index + 1) * batch_size]
            loss = model(x, y)  # 计算loss  model.forward(x,y)
            loss.backward()  # 计算梯度
            optim.step()  # 更新权重
            optim.zero_grad()  # 梯度归零
            watch_loss.append(loss.item())
        print("=========\n第%d轮平均loss:%f" % (epoch + 1, np.mean(watch_loss)))
        acc = evaluate(model)  # 测试本轮模型结果
        log.append([acc, float(np.mean(watch_loss))])
    # 保存模型
    torch.save(model.state_dict(), "model.bin")
    # 画图
    print(log)
    plt.plot(range(len(log)), [l[0] for l in log], label="acc")  # 画acc曲线
    plt.plot(range(len(log)), [l[1] for l in log], label="loss")  # 画loss曲线
    plt.legend()
    plt.show()
    return


def predict(model_path, input_vec):
    model = MyTorchModel(5, 5)
    model.load_state_dict(torch.load(model_path))  # 加载训练好的权重
    print(model.state_dict())

    model.eval()  # 设置为评估模式
    with torch.no_grad():  # 不加载梯度
        result = model(torch.FloatTensor(input_vec))  # 获取概率分布
        predicted_classes = torch.argmax(result, dim=1)  # 获取预测类别
    for vec, res, pred_class in zip(input_vec, result, predicted_classes):
        print(f"输入：{vec}, 预测类别：{pred_class.item()}, 概率分布：{res.numpy()}")


if __name__ == "__main__":
    main()
    # randint = np.random.randint(1, 10, size=(5, 5))
    # print(randint)
    # predict("model.bin", randint)
